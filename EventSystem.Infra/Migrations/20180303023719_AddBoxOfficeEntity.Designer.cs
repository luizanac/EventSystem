// <auto-generated />
using EventSystem.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace EventSystem.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180303023719_AddBoxOfficeEntity")]
    partial class AddBoxOfficeEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("EventSystem.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Rg");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AdministratorId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid?>("EventAdministratorId");

                    b.Property<string>("Name");

                    b.Property<string>("Photo");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("EventAdministratorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("EventId");

                    b.Property<DateTime>("PaymenteDate");

                    b.Property<Guid?>("PointOfSaleId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.HasIndex("PointOfSaleId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.PointOfSaleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("EventId");

                    b.Property<Guid?>("PointOfSaleId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PointOfSaleId");

                    b.ToTable("PointOfSaleEvents");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");


                    b.ToTable("Administrator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.EventAdministrator", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");

                    b.Property<Guid?>("AdministratorId");

                    b.HasIndex("AdministratorId");

                    b.ToTable("EventAdministrator");

                    b.HasDiscriminator().HasValue("EventAdministrator");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.PointOfSale", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");

                    b.Property<string>("Cnpj");

                    b.Property<string>("Phone");

                    b.ToTable("PointOfSale");

                    b.HasDiscriminator().HasValue("PointOfSale");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Event", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Administrator")
                        .WithMany("Events")
                        .HasForeignKey("AdministratorId");

                    b.HasOne("EventSystem.Domain.Entities.EventAdministrator")
                        .WithMany("Events")
                        .HasForeignKey("EventAdministratorId");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Payment", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("EventSystem.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("EventSystem.Domain.Entities.PointOfSale", "PointOfSale")
                        .WithMany()
                        .HasForeignKey("PointOfSaleId");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.PointOfSaleEvent", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("EventSystem.Domain.Entities.PointOfSale", "PointOfSale")
                        .WithMany()
                        .HasForeignKey("PointOfSaleId");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.EventAdministrator", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId");
                });
#pragma warning restore 612, 618
        }
    }
}
