// <auto-generated />
using EventSystem.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace EventSystem.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("EventSystem.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("EventAdministratorId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("EventAdministratorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("PaymenteDate");

                    b.Property<Guid>("PointOfSaleEventId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PointOfSaleEventId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.PointOfSaleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("EventId");

                    b.Property<Guid>("PointOfSaleId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PointOfSaleId");

                    b.ToTable("PointOfSaleEvents");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Administrator", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");


                    b.ToTable("Administrator");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.BoxOffice", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");


                    b.ToTable("BoxOffice");

                    b.HasDiscriminator().HasValue("BoxOffice");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.EventAdministrator", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");

                    b.Property<Guid>("AdministratorId");

                    b.HasIndex("AdministratorId");

                    b.ToTable("EventAdministrator");

                    b.HasDiscriminator().HasValue("EventAdministrator");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.PointOfSale", b =>
                {
                    b.HasBaseType("EventSystem.Domain.Entities.User");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)");

                    b.ToTable("PointOfSale");

                    b.HasDiscriminator().HasValue("PointOfSale");
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Event", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.EventAdministrator", "EventAdministrator")
                        .WithMany("Events")
                        .HasForeignKey("EventAdministratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.Payment", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventSystem.Domain.Entities.PointOfSaleEvent", "PointOfSaleEvent")
                        .WithMany("Payments")
                        .HasForeignKey("PointOfSaleEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.PointOfSaleEvent", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Event", "Event")
                        .WithMany("PointOfSaleEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventSystem.Domain.Entities.PointOfSale", "PointOfSale")
                        .WithMany("PointOfSaleEvents")
                        .HasForeignKey("PointOfSaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventSystem.Domain.Entities.EventAdministrator", b =>
                {
                    b.HasOne("EventSystem.Domain.Entities.Administrator", "Administrator")
                        .WithMany("EventAdministrators")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
